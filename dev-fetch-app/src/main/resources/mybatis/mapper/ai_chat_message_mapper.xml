<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.onepiece.infrastructure.dao.IAiChatMessageDao">

    <resultMap id="aiChatMessageMap" type="com.onepiece.infrastructure.dao.po.AiChatMessage">
        <id column="id" property="id"/>
        <result column="session_id" property="sessionId"/>
        <result column="message_id" property="messageId"/>
        <result column="role" property="role"/>
        <result column="content" property="content"/>
        <result column="message_order" property="messageOrder"/>
        <result column="is_streaming" property="isStreaming"/>
        <result column="create_time" property="createTime"/>
    </resultMap>

    <insert id="insert" parameterType="com.onepiece.infrastructure.dao.po.AiChatMessage">
        INSERT INTO ai_chat_message (
            session_id, message_id, role, content, message_order, is_streaming, create_time
        ) VALUES (
            #{sessionId}, #{messageId}, #{role}, #{content}, #{messageOrder}, #{isStreaming}, NOW()
        )
        ON DUPLICATE KEY UPDATE 
            role = VALUES(role),
            content = VALUES(content),
            message_order = VALUES(message_order),
            is_streaming = VALUES(is_streaming)
    </insert>

    <insert id="insertBatch" parameterType="java.util.List">
        INSERT INTO ai_chat_message (
            session_id, message_id, role, content, message_order, is_streaming, create_time
        ) VALUES
        <foreach collection="messages" item="message" separator=",">
            (#{message.sessionId}, #{message.messageId}, #{message.role}, #{message.content}, 
             #{message.messageOrder}, #{message.isStreaming}, NOW())
        </foreach>
        ON DUPLICATE KEY UPDATE 
            role = VALUES(role),
            content = VALUES(content),
            message_order = VALUES(message_order),
            is_streaming = VALUES(is_streaming)
    </insert>

    <select id="queryBySessionId" parameterType="java.lang.String" resultMap="aiChatMessageMap">
        SELECT id, session_id, message_id, role, content, message_order, is_streaming, create_time
        FROM ai_chat_message
        WHERE session_id = #{sessionId}
        ORDER BY message_order ASC, create_time ASC
    </select>

    <select id="countBySessionId" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM ai_chat_message WHERE session_id = #{sessionId}
    </select>

    <delete id="deleteBySessionId" parameterType="java.lang.String">
        DELETE FROM ai_chat_message WHERE session_id = #{sessionId}
    </delete>

</mapper>
